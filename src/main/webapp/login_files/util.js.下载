//将<a href="#" ...></a>全部改为href="javascript:void(0); 这样页面不会滚动到顶端(#默认为“#top”）
/*
  <a href="#"> 点击链接后，页面会向上滚到页首，# 默认锚点为 #TOP
  <a href="javascript:void(0)" onClick="window.open()"> 点击链接后，页面不动，只打开链接
  <a href="#" onclick="javascript:return false;"> 作用同上，不同浏览器会有差异。
  点击链接后，不想使页面滚到页首，就用href="javascript:void(0)"，不要用href="#"，return false也有类似作用 
*/
var userAgent = navigator.userAgent;
function setBlankLink(){
	$("a[href='#']").attr('href','javascript:void(0)');
}

function del_box(id){
	if(id==null)
		id='contexttableTitle';
	var container = $("#" + id + "_box");
	var oparent = container.parent();
	container.remove(); 
	var table=$("<table id='"+id+"'></table>");
	oparent.append(table);
}


function getStringByAjax(actionUrl,jsonParams,element){
	$.get(actionUrl,jsonParams,function(data){
		if(data){
			$(element).html(data);
		}else
			$(element).html(stitle);
	});
}

/*
 * 
 */
function getOptionsForSelect(elementId,actionUrl,jsonData,fillBlank,blankValue) {
    var selectObj = document.getElementById(elementId);
    var op = selectObj.options;
    if(op.length>1)
    	return;
    	
    if(fillBlank){
    	var txt = '全部';
    	if(fillBlank=='请选择')
    		txt = '-请选择-';
    	selectAdd(selectObj,txt,blankValue);
    }
    $.get(actionUrl,jsonData,function(data){
		var json = JSON.parse(data);
		$.each(json,function(i,result){
			selectAdd(selectObj,result['text'],result['value']);
		})
	});
}

function clearSelectOptions(elementId,emptyString){
	var selectObj = document.getElementById(elementId);
    selectObj.options.length = 0;
    if(emptyString){
    	selectAdd(selectObj,'全部','0');
    }
}
/*为select增加选项*/
function selectAdd(oListbox, sName, sValue) 
{
    var oOption = document.createElement("option");
    oOption.appendChild(document.createTextNode(sName));

    if (arguments.length == 3) 
    {
        oOption.setAttribute("value", sValue);
    }
    oListbox.appendChild(oOption);
}

/*---------------------------
功能:停止事件冒泡
---------------------------*/
function stopBubble(e) {
	//如果提供了事件对象，则这是一个非IE浏览器
	if ( e && e.stopPropagation )
		//因此它支持W3C的stopPropagation()方法
		e.stopPropagation();
	else
		//否则，我们需要使用IE的方式来取消事件冒泡
		window.event.cancelBubble = true;
}
//阻止浏览器的默认行为
function stopDefault( e ) {
	//阻止默认浏览器动作(W3C)
	if ( e && e.preventDefault )
		e.preventDefault();
	//IE中阻止函数器默认动作的方式
	else
		window.event.returnValue = false;
	return false;
}
/**
 * 去空字符,支持指定字符为'去空字符'
 * @param {} oValue
 * @param {} strNull 默认空字符为'null'
 * @return {String}
 */
function ifEmpty(oValue,strNull){
	if(!oValue) return '';
	strNull = strNull || 'null';
	if(oValue.toLowerCase()==strNull) return '';
	return oValue;
}

//判断日期格式是否正确
function DateIsTrue(dateStr) {
	//日期格式正则表达式，判断日期的格式是否正确
	var re = /^[1-9]\d{3}-\d{1,2}-\d{1,2}$/; 
	//判断日期的有效性
	if( re.test(dateStr)) {
		var dateArr = dateStr.split("-");
		var year = dateArr[0];
		var month = dateArr[1];
		var day = dateArr[2];
		var date = new Date(month + '-' + day + '-' + year);
		var date_y = date.getFullYear();
		var date_m = date.getMonth()+1;
		var date_d = date.getDate();
		if(parseInt(year) == date_y && parseInt(month) == date_m && parseInt(day) == date_d) {
			return true;
		}else {
			alert("检索的日期逻辑错误!");
			return false;
		}
	}else{
		alert('日期格式错误!<br />标准格式:"年-月-日"');
		return false;
	}
}
//日期字符串转化为日期
//格式 : yyyy-MM-dd
function strToDate(str)
{
	var arys= str.split('-');
	return new Date(arys[1]+'-'+arys[2]+'-'+arys[0]);
}

function formatStrDate(str)
{
	if(str && str.length>10)
	{
	return  str.substring(0,10);
	}else
	{
	return "";
	}
}
// 返回两个日期相差的天数
// bigTime, smallTime为yyyy-MM-dd格式
function returnDiffDays(bigTime, smallTime) {
	var bigDate = strToDate(bigTime);
	var smallDate = strToDate(smallTime);
	var diffDays = parseInt((bigDate.getTime() - smallDate.getTime()) / (1000 * 60 * 60 * 24)); // 相差天数
	return diffDays;
}

//日期格式化"yyyy-mm-dd"      
Date.prototype.toString = function() {
	var strMonth = this.getMonth() < 9 ? ("0" + (this.getMonth() + 1)) : (this.getMonth() + 1);
	var strDay = this.getDate() < 9 ? ("0" + this.getDate()) : this.getDate();
	return this.getFullYear() + "-" + strMonth + "-" + strDay;
};
/*
 *--------------- Date.prototype.format(format) -----------------
 * Date.format(format)
 * 功能:日期格式化.
 * 参数:format, 字符串表达式,表示要格式的样式
 * 返回:格式化后的字符串日期.
 *
 * usage: 
 * var now = new Date();
 * var newDate = now.format();
 *--------------- Date.prototype.format(format) -----------------
 */
Date.prototype.format = function(format) //author: meizz 
{ 
  var o = { 
    "M+" : this.getMonth()+1, //month 
    "d+" : this.getDate(),    //day 
    "h+" : this.getHours(),   //hour 
    "m+" : this.getMinutes(), //minute 
    "s+" : this.getSeconds(), //second 
    "q+" : Math.floor((this.getMonth()+3)/3),  //quarter 
    "S" : this.getMilliseconds() //millisecond 
  } 
  if(/(y+)/.test(format)){
	  format=format.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length)); 
  }
  for(var k in o){
	  if(new RegExp("("+ k +")").test(format)){
			format = format.replace(RegExp.$1,RegExp.$1.length==1 ? o[k] : ("00"+ o[k]).substr((""+ o[k]).length)); 
	  }
  }
  return format; 
} 
/*
 *--------------- getDate(interval,number,date) -----------------
 * getDate(interval,number,date) 
 * 功能:实现VBScript的DateAdd功能.
 * 参数:interval,字符串表达式，表示要添加的时间间隔, 取值: y/q/M/w/d/h/m/s ; 默认d .
 * 参数:number,数值表达式，表示要添加的时间间隔的个数.
 * 参数:date,时间对象.
 * 返回:新的时间对象.
 *
 * usage: 
 * var now = new Date();
 * var newDate = getDate("d",5,now);
 *--------------- getDate(interval,number,date) -----------------
 */

function getDate(interval,number,date){
	if(arguments.length==0){
		return new Date();
	}
	switch(interval)
    {
        case "y" : {
            date.setFullYear(date.getFullYear()+number);
            return date;
            break;
        }
        case "q" : {
            date.setMonth(date.getMonth()+number*3);
            return date;
            break;
        }
        case "M" : {
            date.setMonth(date.getMonth()+number);
            return date;
            break;
        }
        case "w" : {
            date.setDate(date.getDate()+number*7);
            return date;
            break;
        }
        case "d" : {
            date.setDate(date.getDate()+number);
            return date;
            break;
        }
        case "h" : {
            date.setHours(date.getHours()+number);
            return date;
            break;
        }
        case "m" : {
            date.setMinutes(date.getMinutes()+number);
            return date;
            break;
        }
        case "s" : {
            date.setSeconds(date.getSeconds()+number);
            return date;
            break;
        }
        default : {
            date.setDate(d.getDate()+number);
            return date;
            break;
        }
    }
}

/**
 * 时间戳转yyyy-MM-dd HH:mm:ss
 * @param now
 * @returns {string}
 */
function dateFormat(t,pattern){
    var now;
    //兼容IE浏览器，需将日期中的 - 转为 /
    if (t.toString().indexOf("-")>0 && isIE()){
        now = new Date(Date.parse(t.replace("-","/")));
    }else {
		now = new Date(t);
    }
    var year = now.getFullYear();
    var month = now.getMonth() < 9 ? ("0" + (now.getMonth()+1)) : (now.getMonth() + 1);
    var date = now.getDate() < 10 ? ("0" + now.getDate()) : (now.getDate());
    var hour = now.getHours() < 10 ? ("0" + now.getHours()) : (now.getHours());
    var minute = now.getMinutes() < 10 ? ("0" + now.getMinutes()) : (now.getMinutes());
    var second = now.getSeconds() < 10 ? ("0" + now.getSeconds()) : (now.getSeconds());
    var returnVal;
    if (pattern.toLowerCase() == 'yyyy-mm-dd'){
        if (isSafari()){
            returnVal = t.substring(0,10);
        }else {
            returnVal = year+"-"+month+"-"+date;
        }
	}else if (pattern.toLowerCase() == 'yyyy-mm-dd hh:mm'){
        if (isSafari()){
            returnVal = t.substring(0,16);
        }else {
            returnVal = year+"-"+month+"-"+date+"   "+hour+":"+minute;
        }
	}else {
        if (isSafari()){
            returnVal = t;
        }else {
            returnVal = year+"-"+month+"-"+date+" "+hour+":"+minute+":"+second;
        }
    }
    return  returnVal;
}

/*
 * 取(指定日期的)昨天日期
 * 返回"yyyy-mm-dd"格式字符串
 */
function getNowday(){
	if(arguments.length>0){
		var dateStr = arguments[0].split("-"); 
		return new Date(new Date(dateStr[1]+"-"+dateStr[2]+"-"+dateStr[0])).toString(); 
	}else{
		return new Date(new Date().getTime()).toString();
	}
}

/*
 * 取(指定日期的)昨天日期
 * 返回"yyyy-mm-dd"格式字符串
 */
function getYesterday(){
	if(arguments.length>0){
		var dateStr = arguments[0].split("-"); 
		return new Date(new Date(dateStr[1]+"-"+dateStr[2]+"-"+dateStr[0])-1000*60*60*24).toString(); 
	}else{
		return new Date(new Date().getTime() - 1000*60*60*24).toString();
	}
}

/**
 * 获得某月的最后一天  
 * @param {} year 年 如2013
 * @param {} month 月 如8
 * @return {} Date
 */
function getFirstDay(year,month) {         
	return new Date(year,month-1,1);
}

/**
 * 获得某月的最后一天  
 * @param {} year 年 如2013
 * @param {} month 月 如8
 * @return {} Date
 */
function getLastDay(year,month) {         
	var new_date = new Date(year,month,1);         
	return new Date(new_date.getTime()-1000*60*60*24);         
}

/**
 * 格式化数字（千分位）
 * @param {} a
 * @param {} bz 保留小数位,默认保留2位
 * @param {} m  是否千分位形式输出,默认千分位输出
 * @return {}
 */
  function formatNum(a,bz,m) {
  	var n='';
	bz = (isNaN(bz))?2:bz;
	if(arguments.length==1){
		bz = 2;
	}
	a = (a===0?'0':a);
	if(!a){
		return n;
	}
	if(isNaN(a)){
		return '';
	}
	a = a.toString();
	var re=/(\d{1,3})(?=(\d{3})+(?:$|\D))/g;
	var b = parseFloat(a);
	n = b.toFixed(bz);
	return m?n:n.replace(re,"$1,");
}
//智能去掉小数点后的零'0'
function smartRmZero(v){
	var re=/(\d)(\.0+)$/g;
	return v.replace(re,"$1")
}
//intval(v)转换为数字(只取整,不四舍五入)
function intval(v){
	v = parseInt(v);
	return isNaN(v) ? 0 : v;
}
//整型数据格式化(四舍五入)
function formateIntNum(str) {
	return str==''?'':Math.round(str);
}
/*
 * 空值,null,0,undefined 转为字符串''
 */
function zero2Empty(value){

	return (!value || intval(value)==0)?'':value;
}
//Get Query String Using Javascript
function querySt(ji) {
	var hu = window.location.search.substring(1);
	var gy = hu.split("&");
	if(gy.length>0){
		for (i=0;i<gy.length;i++) {
			var ft = gy[i].split("=");
			if (ft[0] == ji) {
				return ft[1];
			}
		}
	}else{
		return '';
	}
}

/**
 * 判断数组值是否存在
 */
function isExist(arr,value){
	for(var i = 0; i<arr.length; i++){
		if(arr[i] == value){
			return i;
		}
	}
	return -1;
}
/**
 * 克隆json对象
 * @param jsonObj
 * @param newName
 * @returns
 */
function clone(jsonObj, newName) {
    var buf;
    if (jsonObj instanceof Array) {
        buf = [];
        var i = jsonObj.length;
        while (i--) {
            buf[i] = clone(jsonObj[i], newName);
        }
        return buf;
    }else if (typeof jsonObj == "function"){
        return jsonObj;
    }else if (jsonObj instanceof Object){
        buf = {};
        for (var k in jsonObj) {
	        if (k!="parentNode") {
	            buf[k] = clone(jsonObj[k], newName);
	            if (newName && k=="name") buf[k] += newName;
	        }
        }
        return buf;
    }else{
        return jsonObj;
    }
}

function JsonToStr(o) {
	var arr = [];
	var fmt = function(s) {
	if (typeof s == 'object' && s != null) return JsonToStr(s);
		return /^(string|number)$/.test(typeof s) ? "'" + s + "'" : s;
	}
	for (var i in o) 
		arr.push("'" + i + "':" + fmt(o[i]));
	return '{' + arr.join(',') + '}';
}

//去null值
function removeNull(str){
	return str==null?'':str;
}

//格式化日期－－去日期时分秒
function formatDate(str){
	return str.toString().substring(0,10);
}

/*
 * 将null转为0
 */
function null2Zero(value){
	if(value == null || value == ""){
		return 0;
	}else{
		return value;
	}
}

function exchangeSize (bytes) {
    var i = Math.floor(Math.log(bytes) / Math.log(1024)),
        sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    return (bytes / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + sizes[i];
}

//去除html标签
function html2String(html){
    html = html.replace(/(\n)/g, "");
    html = html.replace(/(\t)/g, "");
    html = html.replace(/(\r)/g, "");
    html = html.replace(/<\/?[^>]*>/g, "");
    html = html.replace(/\s*/g, "");
    return html==null?'':html;
}

String.prototype.replaceAll = function (FindText, RepText) {
    regExp = new RegExp(FindText, "g");
    return this.replace(regExp, RepText);
}

//为jquery.serializeArray()解决radio,checkbox未选中时没有序列化的问题
$.fn.extend_serialize = function () {
    var a = this.serializeArray();
    var $radio = $('input[type=radio],input[type=checkbox]', this);
    var temp = {};
    $.each($radio, function () {
        if (!temp.hasOwnProperty(this.name)) {
            if ($("input[name='" + this.name + "']:checked").length == 0) {
                temp[this.name] = "";
                a.push({name: this.name, value: "0"});
            }
        }
    });
    //console.log(a);
    return jQuery.param(a);
};

//Array去重
function unique(arr) {
    var result = [], hash = {};
    for (var i = 0, elem; (elem = arr[i]) != null; i++) {
        if (!hash[elem]) {
            result.push(elem);
            hash[elem] = true;
        }
    }
    return result;
}


function stringTrim(s) {
    return s.replace(/^\s+|\s+$/gm,'');
}


function checkMobile(value){
    if (null2Zero(stringTrim(value))==0){
        return false;
    }else {
        if(value.indexOf(",")>-1){
            return false;
        }else if(!(/^1[3|4|5|7|8|9][0-9]\d{8}$/.test(stringTrim(value)))){
            return false;
        }else {
            return true;
        }
    }
}

//判断对象是否为空
function isEmptyObj(value){
    if(value == null || value == ""){
        return true;
    }else{
        return false;
    }
}

function isIE() {
    if (userAgent.toLowerCase().indexOf("compatible") > -1 || userAgent.toLowerCase().indexOf("msie") > -1 || userAgent.toLowerCase().indexOf(".net") > -1){
        return true;
    }else {
        return false;
    }
}

function isEdge() {
    if (userAgent.toLowerCase().indexOf("Edge") > -1){
        return true;
    }else {
        return false;
    }
}

function isChrome() {
    if (userAgent.toLowerCase().indexOf("chrome") > -1){
        return true;
    }else {
        return false;
    }
}

function isSafari() {
    if ((userAgent.toLowerCase().indexOf("applewebkit") > -1 || userAgent.toLowerCase().indexOf("safari") > -1) && userAgent.toLowerCase().indexOf("chrome") == -1){
        return true;
    }else {
        return false;
    }
}

function isFireFox() {
    if (userAgent.toLowerCase().indexOf("firefox") > -1){
        return true;
    }else {
        return false;
    }
}

//清空file值
function clearInputFile(f){
    if(f.value){
        try{
            f.value = ''; //支持IE11，最新版Chrome/Firefox/Opera...
        }catch(err){
        }
        if(f.value){ //支持IE5 ~ IE10
            var form = document.createElement('form'), ref = f.nextSibling, p = f.parentNode;
            form.appendChild(f);
            form.reset();
            p.insertBefore(f,ref);
        }
    }
}

/** ------- 实现Map集合 ------- **/
function Map() {
	// 存放键的数组
	this.keys = new Array();
	// 存放数据
	this.data = new Object();
	
	/**
	 * 放入键值对
	 */
	this.put = function(key, value) {
		if (this.data[key] == null) {
			this.keys.push(key);
		}
		this.data[key] = value;
	};
	
	/**
	 * 获取某个key的值
	 */
	this.get = function(key) {
		return this.data[key];
	};
	
	/**
	 * 删除一个键值对
	 */
	this.remove = function(key) {
		this.keys.remove(key);
		this.data[key] = null;
	};
	
	/**
	 * 判断是否存在某个Key 
	 */
	this.containsKey = function(key) {
		var len = this.keys.length;
		for (var i = 0; i < len; i++) {
			if (this.keys[i] == key) {
				return true;
			}
		}
		return false;
	};
	
	/**
	 * 遍历Map,执行处理函数
	 */
	this.each = function(fn) {
		if (typeof fn != "function") {
			return;
		}
		var len = this.keys.length;
		for (var i = 0; i < len; i++) {
			var k = this.keys[i];
			fn(k, this.data[k], i);
		}
	};
	
	/**
	 * 获取键值数组(类似Java的entrySet())
	 */
	this.entrys = function() {
		var len = this.keys.length;
		var entrys = new Array(len);
		for (var i = 0; i < len; i++) {
			entrys[i] = {
				key : this.keys[i],
				value : this.data[i]
			};
		}
		return entrys;
	};
	
	/**
	 * 判断Map是否为空
	 */
	this.isEmpty = function() {       
        return this.keys.length == 0;       
    };
	
	/**
	 * 获取键值对数量
	 */
	this.size = function() {
		return this.keys.length;
	};
}

/** ------- 是否为空 ------- **/
function isEmpty(str) {
	return str == null || str == '' || str.length == 0 || str == undefined;
}